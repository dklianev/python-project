"""
Environment configuration helper for the Personal Assistant.
"""

import os
from typing import Dict, List, Tuple
from dotenv import load_dotenv


def load_and_validate_env() -> Tuple[bool, List[str]]:
    """
    Load environment variables and validate them.
    
    Returns:
        Tuple of (is_valid, list_of_issues)
    """
    load_dotenv()
    
    issues = []
    
    # Check OpenWeather API key
    openweather_key = os.getenv("OPENWEATHER_API_KEY", "")
    if not openweather_key or openweather_key == "your_openweather_api_key_here":
        issues.append("‚ö†Ô∏è  OpenWeather API –∫–ª—é—á –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω")
    
    # Check OpenAI API key (optional)
    openai_key = os.getenv("OPENAI_API_KEY", "")
    llm_model = os.getenv("LLM_MODEL", "llama3.2")
    if llm_model == "openai" and (not openai_key or openai_key == "your_openai_api_key_here"):
        issues.append("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –µ –Ω—É–∂–µ–Ω –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –º–æ–¥–µ–ª")
    
    # Check Ollama URL
    ollama_url = os.getenv("OLLAMA_API_URL", "")
    if not ollama_url:
        issues.append("‚ö†Ô∏è  Ollama API URL –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω")
    
    return len(issues) == 0, issues


def get_api_status() -> Dict[str, str]:
    """
    Get the status of API keys.
    
    Returns:
        Dictionary with API status information
    """
    load_dotenv()
    
    status = {}
    
    # OpenWeather
    openweather_key = os.getenv("OPENWEATHER_API_KEY", "")
    if not openweather_key or openweather_key == "your_openweather_api_key_here":
        status["openweather"] = "‚ùå –ù–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"
    else:
        status["openweather"] = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"
    
    # OpenAI
    openai_key = os.getenv("OPENAI_API_KEY", "")
    if not openai_key or openai_key == "your_openai_api_key_here":
        status["openai"] = "‚ùå –ù–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"
    else:
        status["openai"] = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"
    
    # LLM Model
    llm_model = os.getenv("LLM_MODEL", "llama3.2")
    status["llm_model"] = f"ü§ñ {llm_model}"
    
    return status


def create_env_instructions() -> str:
    """
    Create instructions for setting up environment variables.
    
    Returns:
        Formatted instructions string
    """
    instructions = """
üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ API –∫–ª—é—á–æ–≤–µ:

1. üå§Ô∏è  OpenWeather API (–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Ä–µ–º–µ—Ç–æ):
   ‚Ä¢ –û—Ç–∏–¥–µ—Ç–µ –Ω–∞: https://openweathermap.org/api
   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–π—Ç–µ —Å–µ –±–µ–∑–ø–ª–∞—Ç–Ω–æ
   ‚Ä¢ –ü–æ–ª—É—á–µ—Ç–µ –≤–∞—à–∏—è API –∫–ª—é—á
   ‚Ä¢ –ó–∞–º–µ–Ω–µ—Ç–µ 'your_openweather_api_key_here' –≤ .env —Ñ–∞–π–ª–∞

2. ü§ñ OpenAI API (–∞–∫–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ ChatGPT):
   ‚Ä¢ –û—Ç–∏–¥–µ—Ç–µ –Ω–∞: https://platform.openai.com/api-keys
   ‚Ä¢ –í–ª–µ–∑—Ç–µ —Å –≤–∞—à–∏—è –∞–∫–∞—É–Ω—Ç
   ‚Ä¢ –°—ä–∑–¥–∞–π—Ç–µ –Ω–æ–≤ API –∫–ª—é—á
   ‚Ä¢ –ó–∞–º–µ–Ω–µ—Ç–µ 'your_openai_api_key_here' –≤ .env —Ñ–∞–π–ª–∞

3. ü¶ô Ollama (–∑–∞ –ª–æ–∫–∞–ª–Ω–∏ –º–æ–¥–µ–ª–∏):
   ‚Ä¢ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ Ollama –æ—Ç: https://ollama.ai
   ‚Ä¢ –°—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ Ollama —Å—ä—Ä–≤—ä—Ä–∞
   ‚Ä¢ –ò–∑—Ç–µ–≥–ª–µ—Ç–µ –º–æ–¥–µ–ª: ollama pull llama3.2

üìù –°–ª–µ–¥ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ.
"""
    return instructions


def check_env_file() -> bool:
    """
    Check if .env file exists.
    
    Returns:
        True if .env file exists, False otherwise
    """
    return os.path.exists(".env")


def print_env_status():
    """Print current environment status to console."""
    if not check_env_file():
        print("‚ùå .env —Ñ–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞")
        print("üí° –°—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ —Å 'python run.py' –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ")
        return
    
    is_valid, issues = load_and_validate_env()
    status = get_api_status()
    
    print("\nüìä –°—Ç–∞—Ç—É—Å –Ω–∞ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞:")
    print("=" * 40)
    
    for service, stat in status.items():
        print(f"{service.capitalize()}: {stat}")
    
    if issues:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∏:")
        for issue in issues:
            print(f"  {issue}")
        
        print(create_env_instructions())
    else:
        print("\n‚úÖ –í—Å–∏—á–∫–∏ API –∫–ª—é—á–æ–≤–µ —Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ!") 